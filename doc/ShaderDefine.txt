mat4 _e3d_matModel; // 世界矩阵
mat4 _e3d_matProj; 	// 投影矩阵
mat4 _e3d_matView;	// 试图矩阵
vec3 _e3d_Rotation;	// 物体的旋转向量
vec3 _e3d_CameraPos	// 摄像机位置

vec4 _e3d_WorldSpaceLightColor		// 平行光的颜色
vec3 _e3d_WorldSpaceLightDirection	// 平行光的方向
sampler2D _e3d_lightDepthTex		// 平行光阴影深度图
mat4 _e3d_lightMatProj				// 平行光光源的投影矩阵
mat4 _e3d_lightViewMat				// 平行光的视图矩阵

int _e3d_PointLightCount						// 点光源的数目
vec3 _e3d_PointLightPos[_e3d_PointLightCount]	// 点光源的位置数组
vec4 _e3d_PointLightColor[_e3d_PointLightCount]	// 点光源的颜色数组
float _e3d_PointLightRange[_e3d_PointLightCount]// 点光源影响范围数组

mat4 _e3d_getMVPMatrix(); // 获取mvp矩阵乘积

#define USING_DIRECTIONAL_LIGHT // 如果存在平行光源 就会有这个定义
#define USING_POINT_LIGHT		// 如果存在点光源 定义
#define __GLES__				// 如果使用OpenGL ES渲染定义
#define __IOS__ 				// IOS平台
#define __ANDROID__				// Android平台
#define __WIN32__				// Windows平台

// 顶点语义
POSITION  		// 位置 vec3
NORMAL			// 法线 vec3
COLOR			// 颜色 vec4
TEXTURECOORD	// 纹理坐标0 vec2
TEXTURECOORD0 	// 纹理坐标0 vec2
TEXTURECOORD1	// 纹理坐标1 vec2
TEXTURECOORD2	// 纹理坐标2 vec2
TEXTURECOORD3	// 纹理坐标3 vec2
TEXTURECOORD4	// 纹理坐标4 vec2
TEXTURECOORD5	// 纹理坐标5 vec2
TEXTURECOORD6	// 纹理坐标6 vec2
TEXTURECOORD7	// 纹理坐标7 vec2
TANGENT			// 切线 vec3
BONEINDEX		// 骨骼索引	vec4
BONEWEIGHT		// 骨骼权重 vec4

TRANSPOSITION	// 变换位置 	vec3
TRANSSCALE		// 变换的缩放 	vec3
TRANSROTATE		// 变换的旋转 	vec3
DYNAMICCOLOR	// 变换颜色 	vec4